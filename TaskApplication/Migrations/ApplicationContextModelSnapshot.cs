// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskApplication.Data;

namespace TaskApplication.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskApplication.Data.Entities.ToDoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ToDoTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeginDate = new DateTime(2021, 5, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            EndDate = new DateTime(2021, 5, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Schoonmaken",
                            Notes = "Opruimen en netjes maken",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            BeginDate = new DateTime(2021, 5, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            EndDate = new DateTime(2021, 5, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Schilderen",
                            Notes = "Muren schilderen",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            BeginDate = new DateTime(2021, 5, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            EndDate = new DateTime(2021, 5, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Meubels bouwen",
                            Notes = "Ikea meubels in elkaar zetten",
                            Status = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
